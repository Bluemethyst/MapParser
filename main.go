package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"image"
	"image/color"
	"image/png"
	"io"
	"log"
	"math"
	"os"

	"github.com/Tnze/go-mc/nbt"
)

// https://github.com/mircokroon/minecraft-maps-to-images/blob/master/src/main/java/BasicColor.java
// https://minecraft.wiki/w/Map_item_format

func main() {
	// Step 1: Read the file
	data, err := os.ReadFile("map_0.dat")
	if err != nil {
		log.Fatalf("Failed to read file: %v", err)
	}

	// Step 2: Decompress the gzip-compressed data
	gr, err := gzip.NewReader(bytes.NewReader(data))
	if err != nil {
		log.Fatalf("Failed to create gzip reader: %v", err)
	}
	defer gr.Close()

	decompressedData, err := io.ReadAll(gr)
	if err != nil {
		log.Fatalf("Failed to decompress data: %v", err)
	}

	// Step 3: Decode the NBT data
	var mapData MapData
	if err := nbt.Unmarshal(decompressedData, &mapData); err != nil {
		log.Fatalf("Failed to decode NBT data: %v", err)
	}

	fmt.Println(mapData)

	colorMap := map[int][]int{
		0:  {0, 0, 0, 0},
		1:  {0, 0, 0, 0},
		2:  {0, 0, 0, 0},
		3:  {0, 0, 0, 0},
		4:  {89, 125, 39, 255},
		5:  {109, 153, 48, 255},
		6:  {127, 178, 56, 255},
		7:  {67, 94, 29, 255},
		8:  {174, 164, 115, 255},
		9:  {213, 201, 140, 255},
		10: {247, 233, 163, 255},
		11: {130, 123, 86, 255},
		12: {140, 140, 140, 255},
		13: {171, 171, 171, 255},
		14: {199, 199, 199, 255},
		15: {105, 105, 105, 255},
		16: {180, 0, 0, 255},
		17: {220, 0, 0, 255},
		18: {255, 0, 0, 255},
		19: {135, 0, 0, 255},
		20: {112, 112, 180, 255},
		21: {138, 138, 220, 255},
		22: {160, 160, 255, 255},
		23: {84, 84, 135, 255},
		24: {117, 117, 117, 255},
		25: {144, 144, 144, 255},
		26: {167, 167, 167, 255},
		27: {88, 88, 88, 255},
		28: {0, 87, 0, 255},
		29: {0, 106, 0, 255},
		30: {0, 124, 0, 255},
		31: {0, 65, 0, 255},
		32: {180, 180, 180, 255},
		33: {220, 220, 220, 255},
		34: {255, 255, 255, 255},
		35: {135, 135, 135, 255},
		36: {115, 118, 129, 255},
		37: {141, 144, 158, 255},
		38: {164, 168, 184, 255},
		39: {86, 88, 97, 255},
		40: {106, 76, 54, 255},
		41: {130, 94, 66, 255},
		42: {151, 109, 77, 255},
		43: {79, 57, 40, 255},
		44: {79, 79, 79, 255},
		45: {96, 96, 96, 255},
		46: {112, 112, 112, 255},
		47: {59, 59, 59, 255},
		48: {45, 45, 180, 255},
		49: {55, 55, 220, 255},

		50:  {64, 64, 255, 255},
		51:  {33, 33, 135, 255},
		52:  {100, 84, 50, 255},
		53:  {123, 102, 62, 255},
		54:  {143, 119, 72, 255},
		55:  {75, 63, 38, 255},
		56:  {180, 177, 172, 255},
		57:  {220, 217, 211, 255},
		58:  {255, 252, 245, 255},
		59:  {135, 133, 129, 255},
		60:  {152, 89, 36, 255},
		61:  {186, 109, 44, 255},
		62:  {216, 127, 51, 255},
		63:  {114, 67, 27, 255},
		64:  {125, 53, 152, 255},
		65:  {153, 65, 186, 255},
		66:  {178, 76, 216, 255},
		67:  {94, 40, 114, 255},
		68:  {72, 108, 152, 255},
		69:  {88, 132, 186, 255},
		70:  {102, 153, 216, 255},
		71:  {54, 81, 114, 255},
		72:  {161, 161, 36, 255},
		73:  {197, 197, 44, 255},
		74:  {229, 229, 51, 255},
		75:  {121, 121, 27, 255},
		76:  {89, 144, 17, 255},
		77:  {109, 176, 21, 255},
		78:  {127, 204, 25, 255},
		79:  {67, 108, 13, 255},
		80:  {170, 89, 116, 255},
		81:  {208, 109, 142, 255},
		82:  {242, 127, 165, 255},
		83:  {128, 67, 87, 255},
		84:  {53, 53, 53, 255},
		85:  {65, 65, 65, 255},
		86:  {76, 76, 76, 255},
		87:  {40, 40, 40, 255},
		88:  {108, 108, 108, 255},
		89:  {132, 132, 132, 255},
		90:  {153, 153, 153, 255},
		91:  {81, 81, 81, 255},
		92:  {53, 89, 108, 255},
		93:  {65, 109, 132, 255},
		94:  {76, 127, 153, 255},
		95:  {40, 67, 81, 255},
		96:  {89, 44, 125, 255},
		97:  {109, 54, 153, 255},
		98:  {127, 63, 178, 255},
		99:  {67, 33, 94, 255},
		100: {36, 53, 125, 255},
		101: {0, 0, 0, 255},
		102: {0, 0, 0, 255},
		103: {0, 0, 0, 255},
		104: {0, 0, 0, 255},
		105: {0, 0, 0, 255},
		106: {0, 0, 0, 255},
		107: {0, 0, 0, 255},
		108: {0, 0, 0, 255},
		109: {0, 0, 0, 255},
		110: {0, 0, 0, 255},
		111: {0, 0, 0, 255},
		112: {0, 0, 0, 255},
		113: {0, 0, 0, 255},
		114: {0, 0, 0, 255},
		115: {0, 0, 0, 255},
		116: {0, 0, 0, 255},
		117: {0, 0, 0, 255},
		118: {0, 0, 0, 255},
		119: {0, 0, 0, 255},
		120: {0, 0, 0, 255},
		121: {0, 0, 0, 255},
		122: {0, 0, 0, 255},
		123: {0, 0, 0, 255},
		124: {0, 0, 0, 255},
		125: {0, 0, 0, 255},
		126: {0, 0, 0, 255},
		127: {0, 0, 0, 255},
		128: {0, 0, 0, 255},
		129: {0, 0, 0, 255},
		130: {0, 0, 0, 255},
		131: {0, 0, 0, 255},
		132: {0, 0, 0, 255},
		133: {0, 0, 0, 255},
		134: {0, 0, 0, 255},
		135: {0, 0, 0, 255},
		136: {0, 0, 0, 255},
		137: {0, 0, 0, 255},
		138: {0, 0, 0, 255},
		139: {0, 0, 0, 255},
		140: {0, 0, 0, 255},
		141: {0, 0, 0, 255},
		142: {0, 0, 0, 255},
		143: {0, 0, 0, 255},
		144: {0, 0, 0, 255},
		145: {0, 0, 0, 255},
		146: {0, 0, 0, 255},
		147: {0, 0, 0, 255},
		148: {0, 0, 0, 255},
		149: {0, 0, 0, 255},
		150: {0, 0, 0, 255},
		151: {0, 0, 0, 255},
		152: {0, 0, 0, 255},
		153: {0, 0, 0, 255},
		154: {0, 0, 0, 255},
		155: {0, 0, 0, 255},
		156: {0, 0, 0, 255},
		157: {0, 0, 0, 255},
		158: {0, 0, 0, 255},
		159: {0, 0, 0, 255},
		160: {0, 0, 0, 255},
		161: {0, 0, 0, 255},
		162: {0, 0, 0, 255},
		163: {0, 0, 0, 255},
		164: {0, 0, 0, 255},
		165: {0, 0, 0, 255},
		166: {0, 0, 0, 255},
		167: {0, 0, 0, 255},
		168: {0, 0, 0, 255},
		169: {0, 0, 0, 255},
		170: {0, 0, 0, 255},
		171: {0, 0, 0, 255},
		172: {0, 0, 0, 255},
		173: {0, 0, 0, 255},
		174: {0, 0, 0, 255},
		175: {0, 0, 0, 255},
		176: {0, 0, 0, 255},
		177: {0, 0, 0, 255},
		178: {0, 0, 0, 255},
		179: {0, 0, 0, 255},
		180: {0, 0, 0, 255},
		181: {0, 0, 0, 255},
		182: {0, 0, 0, 255},
		183: {0, 0, 0, 255},
		184: {0, 0, 0, 255},
		185: {0, 0, 0, 255},
		186: {0, 0, 0, 255},
		187: {0, 0, 0, 255},
		188: {0, 0, 0, 255},
		189: {0, 0, 0, 255},
		190: {0, 0, 0, 255},
		191: {0, 0, 0, 255},
		192: {0, 0, 0, 255},
		193: {0, 0, 0, 255},
		194: {0, 0, 0, 255},
		195: {0, 0, 0, 255},
		196: {0, 0, 0, 255},
		197: {0, 0, 0, 255},
		198: {0, 0, 0, 255},
		199: {0, 0, 0, 255},
		200: {0, 0, 0, 255},
		201: {0, 0, 0, 255},
		202: {0, 0, 0, 255},
		203: {0, 0, 0, 255},
		204: {0, 0, 0, 255},
		205: {0, 0, 0, 255},
		206: {0, 0, 0, 255},
		207: {0, 0, 0, 255},
	}

	// Define the dimensions of the image based on the size of the Colors array
	// For simplicity, let's assume the image is square and its size is the square root of the length of the Colors array
	imageSize := int(math.Sqrt(float64(len(mapData.Data.Colors))))
	img := image.NewRGBA(image.Rect(0, 0, imageSize, imageSize))

	width := int(math.Sqrt(float64(len(mapData.Data.Colors)))) // Assuming the map is square
	height := width                                            // Assuming the map is square

	for y := 0; y < height; y++ {
		for x := 0; x < width; x++ {
			// Calculate the index in the Colors array
			index := x + y*width
			colorIndex := mapData.Data.Colors[index]

			// Look up the RGB values in the colorMap
			rgb, ok := colorMap[int(colorIndex)]
			if !ok {
				log.Printf("Color index %d not found in colorMap", colorIndex)
				continue
			}

			// Set the pixel color in the image
			img.Set(x, y, color.RGBA{R: uint8(rgb[0]), G: uint8(rgb[1]), B: uint8(rgb[2]), A: 255})
		}
	}

	// Save the image to a file
	file, err := os.Create("output.png")
	if err != nil {
		log.Fatalf("Failed to create image file: %v", err)
	}
	defer file.Close()

	if err := png.Encode(file, img); err != nil {
		log.Fatalf("Failed to encode image: %v", err)
	}

	fmt.Println("Image created successfully.")
}
