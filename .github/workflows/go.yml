# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: "1.22"
            - name: Install dependencies
              run: |
                  go get github.com/Tnze/go-mc/nbt

            - name: Build
              run: go build -v -o mapparser.exe ./...

            - name: List directory contents
              run: ls -la

            - name: Test
              run: go test -v ./...

            - name: Generate Tag Name
              id: generate_tag
              run: |
                  echo "TAG_NAME=v$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

            - name: Create Tag
              run: |
                  git tag ${{ env.TAG_NAME }}
                  git push --tags

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ env.TAG_NAME }}
                  release_name: Release ${{ env.TAG_NAME }}
                  draft: false
                  prerelease: false

            - name: Upload Exe Asset
              id: upload-exe-asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./mapparser.exe
                  asset_name: mapparser.exe
                  asset_content_type: application/octet-stream

            - name: Upload Bat Asset
              id: upload-bat-asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./addtopath.bat
                  asset_name: addtopath.bat
                  asset_content_type: application/octet-stream
